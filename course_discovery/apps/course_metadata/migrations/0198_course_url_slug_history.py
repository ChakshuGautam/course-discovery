# -*- coding: utf-8 -*-
# Generated by Django 1.11.23 on 2019-09-13 17:22
from __future__ import unicode_literals

from django.core.exceptions import ObjectDoesNotExist
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django_extensions.db.fields


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0016_add_case_record_type_id'),
        ('course_metadata', '0197_add_course_key_for_reruns'),
    ]

    def migrate_data_forward(apps, schema_editor):
        updated_draft_course_pks = []
        Course = apps.get_model('course_metadata', 'course')
        CourseUrlSlugHistory = apps.get_model('course_metadata', 'courseUrlSlugHistory')
        for instance in Course.everything.all().order_by('draft'):
            if instance.pk not in updated_draft_course_pks:
                historical_slug = CourseUrlSlugHistory.everything.create(
                    course=instance,
                    partner=instance.partner,
                    draft=instance.draft,
                    is_active=True,
                    previously_published=True
                )
                # need to set slug after create so it's not overridden with the autoslugification
                historical_slug.url_slug = instance.url_slug
                historical_slug.save()

                if instance.draft_version:
                    current_slug_is_active_on_draft = instance.url_slug == instance.draft_version.url_slug
                    draft_slug = CourseUrlSlugHistory.everything.create(
                        course=instance.draft_version,
                        partner=instance.draft_version.partner,
                        draft=True,
                        is_active=current_slug_is_active_on_draft,
                        previously_published=True
                    )
                    draft_slug.url_slug = instance.url_slug
                    draft_slug.save()
                    historical_slug.draft_version = draft_slug
                    historical_slug.save()
                    updated_draft_course_pks.append(instance.draft_version.pk)

                    if not current_slug_is_active_on_draft:
                        new_draft_slug = CourseUrlSlugHistory.everything.create(
                            course=instance.draft_version,
                            partner=instance.draft_version.partner,
                            draft=True,
                            is_active=current_slug_is_active_on_draft,
                            previously_published=False
                        )
                        new_draft_slug.url_slug = instance.draft_version.url_slug
                        new_draft_slug.save()


    def migrate_data_backwards(apps, schema_editor):
        Course = apps.get_model('course_metadata', 'course')
        CourseUrlSlugHistory = apps.get_model('course_metadata', 'courseUrlSlugHistory')

        def getActiveSlug(course_instance):
            try:
                active_slug = CourseUrlSlugHistory.everything.get(
                    course=course_instance,
                    is_active=True
                )
                return active_slug.url_slug
            except ObjectDoesNotExist:
                return ''

        for instance in Course.everything.all():
            instance.url_slug = getActiveSlug(instance)
            instance.save()


    operations = [
        migrations.CreateModel(
            name='CourseUrlSlugHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('draft', models.BooleanField(default=False, help_text='Is this a draft version?')),
                ('url_slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from='course__title')),
                ('is_active', models.BooleanField(default=False)),
                ('previously_published', models.BooleanField(default=False)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='url_slug_history', to='course_metadata.Course')),
                ('draft_version', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='_official_version', to='course_metadata.CourseUrlSlugHistory')),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Partner')),
            ],
            managers=[
                ('everything', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='courseurlslughistory',
            unique_together=set([('partner', 'draft', 'url_slug')]),
        ),
        migrations.AlterUniqueTogether(
            name='course',
            unique_together=set([('partner', 'uuid', 'draft'), ('partner', 'key', 'draft')]),
        ),
        migrations.RunPython(
            migrate_data_forward,
            migrate_data_backwards,
        )
    ]
